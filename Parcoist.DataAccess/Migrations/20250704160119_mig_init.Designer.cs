// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Parcoist.DataAccess.Concrete;

#nullable disable

namespace Parcoist.DataAccess.Migrations
{
    [DbContext(typeof(ParcoContext))]
    [Migration("20250704160119_mig_init")]
    partial class mig_init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Adress", b =>
                {
                    b.Property<int>("AdressID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("AdressID"));

                    b.Property<string>("AddressText")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DistrictID")
                        .HasColumnType("int");

                    b.Property<int?>("DistrictID1")
                        .HasColumnType("int");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<string>("Neighbourhood")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PostalCode")
                        .HasColumnType("bit");

                    b.Property<string>("RecipientName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Street")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("AdressID");

                    b.HasIndex("CityID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DistrictID");

                    b.HasIndex("DistrictID1");

                    b.ToTable("Adress");
                });

            modelBuilder.Entity("Parcoist.Entity.Concrete.Contact", b =>
                {
                    b.Property<int>("ContactID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ContactID"));

                    b.Property<DateTime>("ContactDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("ContactEmail")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactMessage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ContactPhone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("ContactStatus")
                        .HasColumnType("bit");

                    b.Property<string>("ContactSubject")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ContactID");

                    b.ToTable("Contacts");
                });

            modelBuilder.Entity("Parcoist.Entity.Concrete.FeatureValue", b =>
                {
                    b.Property<int>("FeatureValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureValueID"));

                    b.Property<int>("FeatureTypeID")
                        .HasColumnType("int");

                    b.Property<int>("PriceAdjustment")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureValueID");

                    b.HasIndex("FeatureTypeID");

                    b.ToTable("FeatureValues");
                });

            modelBuilder.Entity("Parcoist.Entity.Concrete.Logo", b =>
                {
                    b.Property<int>("LogoID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("LogoID"));

                    b.Property<DateTime>("LogoDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("LogoImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LogoLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("LogoStatus")
                        .HasColumnType("bit");

                    b.Property<string>("LogoTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("LogoID");

                    b.ToTable("Logo");
                });

            modelBuilder.Entity("Parcoist.Entity.Concrete.ProductVariantCombination", b =>
                {
                    b.Property<int>("ProductVariantCombinationID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductVariantCombinationID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("PriceAdjustment")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<string>("VariantKey")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("isDefault")
                        .HasColumnType("bit");

                    b.HasKey("ProductVariantCombinationID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductVariantCombinations");
                });

            modelBuilder.Entity("Parcoist.Entity.Concrete.Slider", b =>
                {
                    b.Property<int>("SliderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SliderID"));

                    b.Property<string>("SliderDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderLink")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SliderLinkTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SliderOrder")
                        .HasColumnType("int");

                    b.Property<bool>("SliderStatus")
                        .HasColumnType("bit");

                    b.Property<string>("SliderTitle")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("SliderID");

                    b.ToTable("Sliders");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Admin", b =>
                {
                    b.Property<int>("ID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Admin");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Brand", b =>
                {
                    b.Property<int>("BrandID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<string>("LogoURL")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Website")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("BrandID");

                    b.ToTable("Brands");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.BrandCategory", b =>
                {
                    b.Property<int>("BrandCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("BrandCategoryID"));

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.HasKey("BrandCategoryID");

                    b.HasIndex("BrandID");

                    b.HasIndex("CategoryID");

                    b.ToTable("BrandCategories");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("CategoryDescription")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryImage")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CategoryName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<int?>("ParentCategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UpdatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("CategoryID");

                    b.HasIndex("ParentCategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.City", b =>
                {
                    b.Property<int>("CityID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CityID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PlateCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("CityID");

                    b.ToTable("City");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Customer", b =>
                {
                    b.Property<int>("CustomerID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerID"));

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("CustomerID");

                    b.HasIndex("UserID")
                        .IsUnique();

                    b.ToTable("Customer");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.CustomerCoupon", b =>
                {
                    b.Property<int>("CustomerCouponID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerCouponID"));

                    b.Property<int>("Count")
                        .HasColumnType("int");

                    b.Property<string>("CouponCode")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireDate")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsUsed")
                        .HasColumnType("bit");

                    b.HasKey("CustomerCouponID");

                    b.HasIndex("CustomerID");

                    b.ToTable("CustomerCoupon");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.CustomerFavory", b =>
                {
                    b.Property<int>("CustomerFavoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CustomerFavoryID"));

                    b.Property<DateTime>("AddedDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("CustomerFavoryID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("ProductID");

                    b.ToTable("CustomerFavory");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Delivery", b =>
                {
                    b.Property<int>("DeliveryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryID"));

                    b.Property<DateTime>("ActualDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("CarrierID")
                        .HasColumnType("int");

                    b.Property<int>("CourierID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DeliveryStatusID")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("PlannedDeliveryDate")
                        .HasColumnType("datetime2");

                    b.Property<string>("TrackingNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("UptadetAt")
                        .HasColumnType("datetime2");

                    b.HasKey("DeliveryID");

                    b.HasIndex("CustomerID");

                    b.HasIndex("DeliveryStatusID");

                    b.HasIndex("OrderID")
                        .IsUnique();

                    b.ToTable("Delivery");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.DeliveryStatus", b =>
                {
                    b.Property<int>("DeliveryStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DeliveryStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DeliveryStatusID");

                    b.ToTable("DeliveryStatus");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.District", b =>
                {
                    b.Property<int>("DistrictID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("DistrictID"));

                    b.Property<int>("CityID")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("DistrictID");

                    b.HasIndex("CityID");

                    b.ToTable("District");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.FeatureType", b =>
                {
                    b.Property<int>("FeatureTypeID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureTypeID"));

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.Property<int>("PriceAdjustment")
                        .HasColumnType("int");

                    b.Property<DateTime>("UpdatetAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Value")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("FeatureTypeID");

                    b.ToTable("FeatureTypes");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.FeatureTypeCategory", b =>
                {
                    b.Property<int>("FeatureTypeCategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FeatureTypeCategoryID"));

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<int>("FeatureTypeID")
                        .HasColumnType("int");

                    b.HasKey("FeatureTypeCategoryID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("FeatureTypeID");

                    b.ToTable("FeatureTypeCategories");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Order", b =>
                {
                    b.Property<int>("OrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderID"));

                    b.Property<int>("BillingAddressID")
                        .HasColumnType("int");

                    b.Property<int>("CouponID")
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<int>("DiscountAmount")
                        .HasColumnType("int");

                    b.Property<int>("GrandTotal")
                        .HasColumnType("int");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("OrderNo")
                        .HasColumnType("int");

                    b.Property<int>("PaymentMethodID")
                        .HasColumnType("int");

                    b.Property<int>("ShippingAddressID")
                        .HasColumnType("int");

                    b.Property<int>("ShippingCost")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("SubTotal")
                        .HasColumnType("int");

                    b.Property<int>("TaxAmount")
                        .HasColumnType("int");

                    b.HasKey("OrderID");

                    b.HasIndex("CustomerID");

                    b.ToTable("Order");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.OrderBrandStatus", b =>
                {
                    b.Property<int>("OrderBrandStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderBrandStatusID"));

                    b.Property<int>("AvgOrderValue")
                        .HasColumnType("int");

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<int>("TotalSales")
                        .HasColumnType("int");

                    b.HasKey("OrderBrandStatusID");

                    b.HasIndex("BrandID")
                        .IsUnique();

                    b.ToTable("OrderBrandStatus");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.OrderItem", b =>
                {
                    b.Property<int>("OrderItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("OrderItemID"));

                    b.Property<decimal>("Discount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<decimal>("LineTotal")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<int>("ProductFeatureFeatureTypeID")
                        .HasColumnType("int");

                    b.Property<int>("ProductFeaturedID")
                        .HasColumnType("int");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("SnapshotFeatureName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("SnapshotFeatureValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("OrderItemID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ProductFeatureFeatureTypeID");

                    b.HasIndex("ProductID");

                    b.ToTable("OrderItem");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.PaymentCard", b =>
                {
                    b.Property<int>("PaymentCardID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PaymentCardID"));

                    b.Property<string>("CardLast4")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardToken")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("CardType")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<int>("CustomerID")
                        .HasColumnType("int");

                    b.Property<DateTime>("ExpireMonth")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("ExpireYear")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsDefault")
                        .HasColumnType("bit");

                    b.HasKey("PaymentCardID");

                    b.HasIndex("CustomerID");

                    b.ToTable("PaymentCard");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Product", b =>
                {
                    b.Property<int>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductID"));

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<int>("BrandID")
                        .HasColumnType("int");

                    b.Property<int>("CategoryID")
                        .HasColumnType("int");

                    b.Property<decimal>("CostPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<decimal>("DiscountedPrice")
                        .HasColumnType("decimal(18,2)");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFeatured")
                        .HasColumnType("bit");

                    b.Property<string>("Link1")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link2")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Link3")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ModelNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("SKU")
                        .HasColumnType("int");

                    b.Property<string>("Slug")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Stock")
                        .HasColumnType("int");

                    b.Property<DateTime>("UptatedAt")
                        .HasColumnType("datetime2");

                    b.HasKey("ProductID");

                    b.ToTable("Products");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ProductImage", b =>
                {
                    b.Property<int>("ProductImageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductImageID"));

                    b.Property<string>("ImagePath")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Order")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.HasKey("ProductImageID");

                    b.HasIndex("ProductID");

                    b.ToTable("ProductImages");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ProductVariantValue", b =>
                {
                    b.Property<int>("ProductVariantValueID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ProductVariantValueID"));

                    b.Property<int>("CombinationID")
                        .HasColumnType("int");

                    b.Property<int>("FeatureTypeID")
                        .HasColumnType("int");

                    b.Property<int>("FeatureValueID")
                        .HasColumnType("int");

                    b.HasKey("ProductVariantValueID");

                    b.HasIndex("CombinationID");

                    b.HasIndex("FeatureTypeID");

                    b.HasIndex("FeatureValueID");

                    b.ToTable("ProductVariantValues");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ReturnItem", b =>
                {
                    b.Property<int>("ReturnItemID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnItemID"));

                    b.Property<int>("ApprovedQuantity")
                        .HasColumnType("int");

                    b.Property<bool>("Condition")
                        .HasColumnType("bit");

                    b.Property<int>("OrderItemID")
                        .HasColumnType("int");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RefundAmount")
                        .HasColumnType("int");

                    b.Property<int>("ReturnRequestID")
                        .HasColumnType("int");

                    b.HasKey("ReturnItemID");

                    b.HasIndex("OrderItemID");

                    b.HasIndex("ReturnRequestID")
                        .IsUnique();

                    b.ToTable("ReturnItem");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ReturnReason", b =>
                {
                    b.Property<int>("ReturnReasonID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnReasonID"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("RequiresImage")
                        .HasColumnType("bit");

                    b.HasKey("ReturnReasonID");

                    b.ToTable("ReturnReason");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ReturnRequest", b =>
                {
                    b.Property<int>("ReturnRequestID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnRequestID"));

                    b.Property<int>("OrderID")
                        .HasColumnType("int");

                    b.Property<DateTime>("RequestDate")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("ResolutionDate")
                        .HasColumnType("datetime2");

                    b.Property<int>("ReturnReasonID")
                        .HasColumnType("int");

                    b.Property<int>("ReturnStatusID")
                        .HasColumnType("int");

                    b.HasKey("ReturnRequestID");

                    b.HasIndex("OrderID");

                    b.HasIndex("ReturnReasonID");

                    b.HasIndex("ReturnStatusID");

                    b.ToTable("ReturnRequest");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ReturnStatus", b =>
                {
                    b.Property<int>("ReturnStatusID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ReturnStatusID"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("ReturnStatusID");

                    b.ToTable("ReturnStatus");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("BirthDate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Phone")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RoleID")
                        .HasColumnType("int");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserID");

                    b.ToTable("User");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.UserComment", b =>
                {
                    b.Property<int>("UserCommentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserCommentID"));

                    b.Property<string>("Comment")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("ProductID")
                        .HasColumnType("int");

                    b.Property<int>("UserID")
                        .HasColumnType("int");

                    b.HasKey("UserCommentID");

                    b.HasIndex("ProductID");

                    b.HasIndex("UserID");

                    b.ToTable("UserComments");
                });

            modelBuilder.Entity("Adress", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.City", "City")
                        .WithMany("Adresses")
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.Customer", "Customer")
                        .WithMany("Adresses")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.District", "District")
                        .WithMany()
                        .HasForeignKey("DistrictID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.District", null)
                        .WithMany("Adresses")
                        .HasForeignKey("DistrictID1");

                    b.Navigation("City");

                    b.Navigation("Customer");

                    b.Navigation("District");
                });

            modelBuilder.Entity("Parcoist.Entity.Concrete.FeatureValue", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("FeatureType");
                });

            modelBuilder.Entity("Parcoist.Entity.Concrete.ProductVariantCombination", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Product", "Product")
                        .WithMany()
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Admin", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.User", "User")
                        .WithOne("Admin")
                        .HasForeignKey("Parcoist.UI.Entities.Admin", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.BrandCategory", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Brand", "Brand")
                        .WithMany("BrandCategories")
                        .HasForeignKey("BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.Category", "Category")
                        .WithMany("BrandCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");

                    b.Navigation("Category");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Category", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Category", "ParentCategory")
                        .WithMany("SubCategories")
                        .HasForeignKey("ParentCategoryID");

                    b.Navigation("ParentCategory");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Customer", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.User", "User")
                        .WithOne("Customer")
                        .HasForeignKey("Parcoist.UI.Entities.Customer", "UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.CustomerCoupon", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Customer", "Customer")
                        .WithMany("CustomerCoupons")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.CustomerFavory", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Customer", "Customer")
                        .WithMany("FavoriteProducts")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.Product", "Product")
                        .WithMany("CustomerFavorites")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Delivery", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Customer", "Customer")
                        .WithMany("Deliveries")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.DeliveryStatus", "DeliveryStatus")
                        .WithMany("Deliveries")
                        .HasForeignKey("DeliveryStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.Order", "Order")
                        .WithOne("Delivery")
                        .HasForeignKey("Parcoist.UI.Entities.Delivery", "OrderID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("DeliveryStatus");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.District", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.City", "City")
                        .WithMany()
                        .HasForeignKey("CityID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("City");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.FeatureTypeCategory", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Category", "Category")
                        .WithMany("FeatureTypeCategories")
                        .HasForeignKey("CategoryID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.FeatureType", "FeatureType")
                        .WithMany("FeatureTypeCategories")
                        .HasForeignKey("FeatureTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Category");

                    b.Navigation("FeatureType");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Order", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.OrderBrandStatus", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Brand", "Brand")
                        .WithOne("OrderBrandStatus")
                        .HasForeignKey("Parcoist.UI.Entities.OrderBrandStatus", "BrandID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.OrderItem", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Order", "Order")
                        .WithMany("OrderItems")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.FeatureType", "ProductFeature")
                        .WithMany()
                        .HasForeignKey("ProductFeatureFeatureTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.Product", "Product")
                        .WithMany("OrderItems")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("Product");

                    b.Navigation("ProductFeature");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.PaymentCard", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Customer", "Customer")
                        .WithMany("PaymentCards")
                        .HasForeignKey("CustomerID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ProductImage", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Product", "Product")
                        .WithMany("ProductImages")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ProductVariantValue", b =>
                {
                    b.HasOne("Parcoist.Entity.Concrete.ProductVariantCombination", "Combination")
                        .WithMany("ProductVariantValues")
                        .HasForeignKey("CombinationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.FeatureType", "FeatureType")
                        .WithMany()
                        .HasForeignKey("FeatureTypeID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.Entity.Concrete.FeatureValue", "FeatureValue")
                        .WithMany()
                        .HasForeignKey("FeatureValueID")
                        .OnDelete(DeleteBehavior.NoAction)
                        .IsRequired();

                    b.Navigation("Combination");

                    b.Navigation("FeatureType");

                    b.Navigation("FeatureValue");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ReturnItem", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.OrderItem", "OrderItem")
                        .WithMany()
                        .HasForeignKey("OrderItemID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.ReturnRequest", "ReturnRequest")
                        .WithOne("ReturnItem")
                        .HasForeignKey("Parcoist.UI.Entities.ReturnItem", "ReturnRequestID")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("OrderItem");

                    b.Navigation("ReturnRequest");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ReturnRequest", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Order", "Order")
                        .WithMany("ReturnRequests")
                        .HasForeignKey("OrderID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.ReturnReason", "ReturnReason")
                        .WithMany()
                        .HasForeignKey("ReturnReasonID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.ReturnStatus", "ReturnStatus")
                        .WithMany()
                        .HasForeignKey("ReturnStatusID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");

                    b.Navigation("ReturnReason");

                    b.Navigation("ReturnStatus");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.UserComment", b =>
                {
                    b.HasOne("Parcoist.UI.Entities.Product", "Product")
                        .WithMany("UserComments")
                        .HasForeignKey("ProductID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Parcoist.UI.Entities.User", "User")
                        .WithMany("UserComments")
                        .HasForeignKey("UserID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Product");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Parcoist.Entity.Concrete.ProductVariantCombination", b =>
                {
                    b.Navigation("ProductVariantValues");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Brand", b =>
                {
                    b.Navigation("BrandCategories");

                    b.Navigation("OrderBrandStatus")
                        .IsRequired();
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Category", b =>
                {
                    b.Navigation("BrandCategories");

                    b.Navigation("FeatureTypeCategories");

                    b.Navigation("SubCategories");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.City", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Customer", b =>
                {
                    b.Navigation("Adresses");

                    b.Navigation("CustomerCoupons");

                    b.Navigation("Deliveries");

                    b.Navigation("FavoriteProducts");

                    b.Navigation("Orders");

                    b.Navigation("PaymentCards");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.DeliveryStatus", b =>
                {
                    b.Navigation("Deliveries");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.District", b =>
                {
                    b.Navigation("Adresses");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.FeatureType", b =>
                {
                    b.Navigation("FeatureTypeCategories");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Order", b =>
                {
                    b.Navigation("Delivery")
                        .IsRequired();

                    b.Navigation("OrderItems");

                    b.Navigation("ReturnRequests");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.Product", b =>
                {
                    b.Navigation("CustomerFavorites");

                    b.Navigation("OrderItems");

                    b.Navigation("ProductImages");

                    b.Navigation("UserComments");
                });

            modelBuilder.Entity("Parcoist.UI.Entities.ReturnRequest", b =>
                {
                    b.Navigation("ReturnItem")
                        .IsRequired();
                });

            modelBuilder.Entity("Parcoist.UI.Entities.User", b =>
                {
                    b.Navigation("Admin")
                        .IsRequired();

                    b.Navigation("Customer")
                        .IsRequired();

                    b.Navigation("UserComments");
                });
#pragma warning restore 612, 618
        }
    }
}
